name: ETL Pipeline
on:
  schedule:
    - cron: "0 20 * * *"  # Runs at 20:00 UTC (06:00 AEST) daily
  workflow_dispatch:

permissions:
  issues: write

jobs:
  run-etl:
    environment: production
    runs-on: [self-hosted, macOS, ARM64]
    env:
      HOME: ${{ github.workspace }}
      RUNNER_TOOL_CACHE: ${{ github.workspace }}/_tool
      RUNNER_TEMP: ${{ github.workspace }}/_temp
      AGENT_TOOLSDIRECTORY: ${{ github.workspace }}/_tool
    steps:
      - name: Prepare runner directories
        run: |
          mkdir -p "$RUNNER_TOOL_CACHE" "$RUNNER_TEMP" "$HOME"
      - uses: actions/checkout@v4
      
      - name: Set up Rust (for building some Python deps like tiktoken)
        run: |
          if ! command -v cargo >/dev/null; then
            curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
            echo "$HOME/.cargo/bin" >> $GITHUB_PATH
            source "$HOME/.cargo/env"
          fi
          # Ensure x86_64 target is present for cross‑compilation needed by some wheels
          rustup target add x86_64-apple-darwin || true
      
      - name: Set up Python virtual environment & install deps
        run: |
          python3 -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          # Allow building PyO3-based packages (e.g. tiktoken) on Python 3.13
          export PYO3_USE_ABI3_FORWARD_COMPATIBILITY=1
          pip install --no-binary :all: tiktoken || true  # pre‑build to show clearer error if it fails
          pip install -r requirements.txt
          echo "VENV_ACTIVATE=source $(pwd)/venv/bin/activate" >> $GITHUB_ENV
      
      - name: Install Playwright Browsers
        run: |
          $VENV_ACTIVATE
          python -m playwright install chromium
      
      - name: Unquarantine Playwright browsers (macOS)
        run: |
          if [[ "$OSTYPE" == "darwin"* ]]; then
            echo "Removing quarantine attribute from Playwright browser binaries"
            find "$HOME/Library/Caches/ms-playwright" -exec xattr -d com.apple.quarantine {} \; || true
          fi
      
      - name: Validate Secrets
        run: |
          # Check if all required secrets are present
          if [ -z "${{ secrets.FRED_API_KEY }}" ]; then
            echo "Error: FRED_API_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "Error: SUPABASE_URL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.SUPABASE_KEY }}" ]; then
            echo "Error: SUPABASE_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.OPENAI_API_KEY }}" ]; then
            echo "Error: OPENAI_API_KEY is not set"
            exit 1
          fi
          if [ -z "${{ secrets.TWITTER_EMAIL }}" ]; then
            echo "Error: TWITTER_EMAIL is not set"
            exit 1
          fi
          if [ -z "${{ secrets.TWITTER_USERNAME }}" ]; then
            echo "Error: TWITTER_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.TWITTER_PASSWORD }}" ]; then
            echo "Error: TWITTER_PASSWORD is not set"
            exit 1
          fi
          echo "All required secrets are present"
      
      - name: Install signed Chromium via Homebrew (macOS)
        if: runner.os == 'macOS'
        run: |
          set -eo pipefail
          # Ensure the runner user can write to Homebrew directories (some
          # self‑hosted runners install Homebrew as root which blocks `brew`)
          BREW_PREFIX="$(brew --prefix 2>/dev/null || true)"
          if [ -z "$BREW_PREFIX" ]; then
            echo "Homebrew not found; installing is out of scope for this workflow"
            exit 1
          fi

          echo "Homebrew prefix is $BREW_PREFIX"

          # Fix common permission issues so `brew install` does not fail
          sudo chown -R "$(whoami)" "$BREW_PREFIX" 2>/dev/null || true
          sudo chown -R "$(whoami)" /usr/local/Cellar 2>/dev/null || true
          sudo chown -R "$(whoami)" /usr/local/var/homebrew 2>/dev/null || true

          # Install or upgrade Chromium
          if brew list --cask chromium >/dev/null 2>&1; then
            echo "Chromium already installed – upgrading to make sure it is fresh"
            brew upgrade --cask chromium || true
          else
            brew install --cask --no-quarantine chromium
          fi

          # Resolve the actual executable path regardless of version / CPU arch
          CHROMIUM_BIN=$(ls -d "$BREW_PREFIX"/Caskroom/chromium/*/Chromium.app/Contents/MacOS/Chromium | head -n 1)

          if [ ! -x "$CHROMIUM_BIN" ]; then
            echo "Could not locate Chromium executable under $BREW_PREFIX/Caskroom/chromium" >&2
            exit 1
          fi

          echo "Using Chromium executable at: $CHROMIUM_BIN"

          # Export for subsequent steps and for any child shells
          echo "PLAYWRIGHT_CHROME_PATH=$CHROMIUM_BIN" >> $GITHUB_ENV
          export PLAYWRIGHT_CHROME_PATH="$CHROMIUM_BIN"
      
      - name: Run ETL
        env:
          # API Keys
          FRED_API_KEY: ${{ secrets.FRED_API_KEY }}
          ALTERNATIVE_API_KEY: ${{ secrets.ALTERNATIVE_API_KEY }}
          
          # Supabase Configuration
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          
          # Google Sheets Configuration
          GOOGLE_SHEET_NAME: ${{ secrets.GOOGLE_SHEET_NAME }}
          GOOGLE_SHEET_WORKSHEET: ${{ secrets.GOOGLE_SHEET_WORKSHEET }}
          
          # Google Service Account
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          
          # OpenAI
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
          # Twitter credentials
          TWITTER_EMAIL: ${{ secrets.TWITTER_EMAIL }}
          TWITTER_USERNAME: ${{ secrets.TWITTER_USERNAME }}
          TWITTER_PASSWORD: ${{ secrets.TWITTER_PASSWORD }}
        run: |
          $VENV_ACTIVATE
          # Create credentials.json from secret with proper JSON formatting
          echo "$GOOGLE_CREDENTIALS" | jq . > credentials.json
          
          # Verify the credentials file was created correctly
          if [ ! -f credentials.json ]; then
            echo "Error: Failed to create credentials.json"
            exit 1
          fi
          
          # Run the ETL pipeline inside venv
          python main.py
          
      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ETL Pipeline Failed',
              body: 'The ETL pipeline failed. Please check the workflow run for details.',
              labels: ['bug', 'etl']
            })
